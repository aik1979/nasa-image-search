{"version":3,"sources":["nasaRow.js","App.js","serviceWorker.js","index.js"],"names":["NASARow","url","this","props","nasaItem","data","nasa_id","window","location","href","react_default","a","createElement","class","src","image_src","alt","title","description","center","onClick","viewnasaItem","bind","value","React","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","performSearch","searchTerm","_this2","console","log","URLstring","$","ajax","success","searchResults","results","collection","items","nasaRows","forEach","links","nasaRow","src_nasaRow","key","push","setState","rows","error","xhr","status","err","event","target","className","width","style","fontSize","display","paddingTop","paddingBottom","paddingLeft","onChange","searchChangeHandler","placeholder","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5f870f1c.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass NASARow extends React.Component {\r\n  viewnasaItem() {\r\n    // console.log(this.props.nasaItem.data[0].nasa_id);\r\n    const url =\r\n      \"https://images.nasa.gov/details-\" +\r\n      this.props.nasaItem.data[0].nasa_id +\r\n      \".html\";\r\n    window.location.href = url;\r\n  }\r\n  render() {\r\n    return (\r\n      <div class=\"card-nasa col-md-5\">\r\n        <img\r\n          class=\"card-img-top\"\r\n          src={this.props.nasaItem.image_src}\r\n          alt=\"Card image cap\"\r\n        />\r\n        <div class=\"card-body\">\r\n          <h5 class=\"card-title text-uppercase\">\r\n            {this.props.nasaItem.data[0].title}\r\n          </h5>\r\n          <p class=\"card-text-nasa text-lowercase\">\r\n            {this.props.nasaItem.data[0].description}\r\n          </p>\r\n        </div>\r\n        <div class=\"card-footer\">\r\n          <div class=\"row\">\r\n            <div class=\"col-md-6 font-italic\">\r\n              <p>Provided by: {this.props.nasaItem.data[0].center}</p>\r\n            </div>\r\n            <div class=\"col-md-6 text-right\">\r\n              <input\r\n                class=\"btn btn-primary\"\r\n                onClick={this.viewnasaItem.bind(this)}\r\n                value=\"Go to Item\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NASARow;\r\n","import \"./App.css\";\n\nimport React, { Component } from \"react\";\n\nimport $ from \"jquery\";\nimport NASARow from \"./nasaRow.js\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n\n    //console.log(\"props initialised\");\n    // const nasa = [\n    //   {\n    //     id: 0,\n    //     image_src: \"https://api.nasa.gov/images/logo.png\",\n    //     title: \"this is the title\",\n    //     description: \"this is the description\",\n    //     centre: \"0\"\n    //   },\n    //   {\n    //     id: 1,\n    //     image_src: \"https://api.nasa.gov/images/logo.png\",\n    //     title: \"this is the title2\",\n    //     description: \"this is the description2\",\n    //     centre: \"1\"\n    //   }\n    // ];\n\n    // var nasaRows = [];\n    // nasa.forEach(nasaItem => {\n    //   console.log(nasaItem.title);\n    //   const nasaRow = <NASARow nasaItem={nasaItem} />;\n    //   nasaRows.push(nasaRow);\n    // });\n    // this.state = { rows: nasaRows };\n    this.performSearch();\n  }\n\n  performSearch(searchTerm) {\n    console.log(\"Search using NASA API\");\n    const URLstring =\n      \"https://images-api.nasa.gov/search?q=\" +\n      searchTerm +\n      \"&media_type=image\";\n    $.ajax({\n      url: URLstring,\n      success: searchResults => {\n        console.log(\"Data Fetch Successful\");\n        // console.log(searchResults);\n        const results = searchResults.collection.items;\n        // console.log(results[0]);\n\n        var nasaRows = [];\n\n        results.forEach(nasaItem => {\n          nasaItem.image_src = nasaItem.links[0].href;\n          // console.log(nasaItem);\n          const nasaRow = (\n            <NASARow key=\"{nasaItem.data[0].nasa_id}\" nasaItem={nasaItem} />\n          );\n          nasaRows.push(nasaRow);\n        });\n\n        this.setState({ rows: nasaRows });\n      },\n      error: (xhr, status, err) => {\n        console.error(\"Data Fetch Failed\");\n      }\n    });\n  }\n\n  searchChangeHandler(event) {\n    console.log(event.target.value);\n    const boundObject = this;\n    const searchTerm = event.target.value;\n    boundObject.performSearch(searchTerm);\n  }\n\n  render() {\n    return (\n      <div>\n        <table className=\"titleHeader\">\n          <tbody>\n            <tr>\n              <td>\n                <img\n                  alt=\"Icon\"\n                  width=\"100\"\n                  src=\"https://api.nasa.gov/images/logo.png\"\n                />\n              </td>\n              <td width=\"10\" />\n              <td>\n                <h1>NASA Images</h1>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n        <input\n          style={{\n            fontSize: 20,\n            display: \"block\",\n            width: \"99%\",\n            paddingTop: 8,\n            paddingBottom: 8,\n            paddingLeft: 15\n          }}\n          onChange={this.searchChangeHandler.bind(this)}\n          placeholder=\"Type here\"\n        />\n        <div class=\"container\">\n          <div class=\"row\">{this.state.rows}</div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import \"bootstrap/dist/css/bootstrap.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}